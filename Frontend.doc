// âœ… MODIFIED VERSION FOR TS >=3.2.1 and <3.5.0 COMPATIBILITY

// Note: This version avoids Omit, as const, advanced tuple inference, etc.

// --- src/components/TicketCard.tsx --- import React from 'react';

interface TicketProps { id: number; subject: string; priority: string; status: string; createdAt: string; agentName?: string; onClick?: () => void; }

const TicketCard: React.FC<{ ticket: TicketProps }> = ({ ticket }) => { const getBgColor = (priority: string): string => { switch (priority) { case 'HIGH': return 'bg-red-200'; case 'MEDIUM': return 'bg-yellow-200'; default: return 'bg-green-200'; } };

return ( <div className="border rounded-lg p-4 mb-3 shadow hover:bg-gray-50 cursor-pointer" onClick={ticket.onClick}> <div className="flex justify-between"> <h3 className="text-lg font-semibold">{ticket.subject}</h3> <span className={px-2 py-1 text-sm rounded-full ${getBgColor(ticket.priority)}}> {ticket.priority} </span> </div> <p className="text-sm text-gray-600 mt-1">Status: {ticket.status}</p> <p className="text-sm text-gray-600">Created: {new Date(ticket.createdAt).toLocaleDateString()}</p> {ticket.agentName && <p className="text-sm text-gray-600">Agent: {ticket.agentName}</p>} </div> ); };

export default TicketCard;

// src/components/TicketCard.tsx
import React from 'react';

interface TicketProps {
  id: number;
  subject: string;
  priority: string;
  status: string;
  createdAt: string;
  agentName?: string;
  onClick?: () => void;
}

const TicketCard: React.FC<{ ticket: TicketProps }> = ({ ticket }) => {
  const priorityColors: any = {
    LOW: 'green',
    MEDIUM: 'yellow',
    HIGH: 'orange',
    URGENT: 'red'
  };

  const statusColors: any = {
    OPEN: 'blue',
    IN_PROGRESS: 'purple',
    CLOSED: 'gray'
  };

  return (
    <div className="border rounded-lg p-4 shadow hover:bg-gray-50 cursor-pointer" onClick={ticket.onClick}>
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">{ticket.subject}</h3>
        <span className={`px-2 py-1 text-sm rounded-full bg-${priorityColors[ticket.priority] || 'gray'}-200`}>
          {ticket.priority}
        </span>
      </div>
      <div className="text-sm text-gray-600 mt-1">
        <p>Status: <span className={`text-${statusColors[ticket.status] || 'gray'}-700`}>{ticket.status}</span></p>
        <p>Created: {new Date(ticket.createdAt).toLocaleDateString()}</p>
        {ticket.agentName && <p>Agent: {ticket.agentName}</p>}
      </div>
    </div>
  );
};

export default TicketCard;

// --- src/pages/Dashboard.tsx --- import React from 'react'; import TicketList from './TicketList';

const Dashboard: React.FC = () => { return ( <div className="p-4"> <h1 className="text-xl font-bold mb-4">Dashboard</h1> <TicketList /> </div> ); };

export default Dashboard;

//TicketList.tsx
// src/pages/TicketList.tsx
import React, { useEffect, useState } from 'react';
import TicketCard from '../components/TicketCard';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const TicketList: React.FC = () => {
  const [tickets, setTickets] = useState<any[]>([]);
  const [search, setSearch] = useState('');
  const [priority, setPriority] = useState('');
  const [status, setStatus] = useState('');
  const [sortBy, setSortBy] = useState('');
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const navigate = useNavigate();

  const fetchTickets = async () => {
    const res = await axios.get('/api/tickets', {
      params: { search, priority, status, sortBy, page },
      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
    });
    setTickets(res.data.tickets);
    setTotalPages(res.data.totalPages);
  };

  useEffect(() => { fetchTickets(); }, [search, priority, status, sortBy, page]);

  return (
    <div className="p-4 space-y-4">
      <div className="flex gap-2">
        <input className="border p-2" placeholder="Search..." value={search} onChange={e => setSearch(e.target.value)} />
        <select className="border p-2" value={priority} onChange={e => setPriority(e.target.value)}>
          <option value="">All Priorities</option>
          <option value="LOW">Low</option>
          <option value="MEDIUM">Medium</option>
          <option value="HIGH">High</option>
          <option value="URGENT">Urgent</option>
        </select>
        <select className="border p-2" value={status} onChange={e => setStatus(e.target.value)}>
          <option value="">All Status</option>
          <option value="OPEN">Open</option>
          <option value="IN_PROGRESS">In Progress</option>
          <option value="CLOSED">Closed</option>
        </select>
        <select className="border p-2" value={sortBy} onChange={e => setSortBy(e.target.value)}>
          <option value="">Sort</option>
          <option value="priority">Priority</option>
          <option value="createdAt">Date</option>
        </select>
      </div>
      {tickets.map(ticket => (
        <TicketCard key={ticket.id} ticket={{ ...ticket, onClick: () => navigate(`/tickets/${ticket.id}`) }} />
      ))}
      <div className="flex justify-center items-center gap-2">
        <button onClick={() => setPage(p => Math.max(p - 1, 1))} disabled={page === 1} className="px-3 py-1 bg-gray-200">Prev</button>
        <span>Page {page} of {totalPages}</span>
        <button onClick={() => setPage(p => Math.min(p + 1, totalPages))} disabled={page === totalPages} className="px-3 py-1 bg-gray-200">Next</button>
      </div>
    </div>
  );
};

export default TicketList;

// --- src/pages/TicketDetails.tsx --- import React, { useEffect, useState } from 'react'; import { useParams } from 'react-router-dom'; import axios from 'axios';

interface TicketDetail { id: number; subject: string; description: string; status: string; priority: string; }

const TicketDetails: React.FC = () => { const { id } = useParams<{ id: string }>(); const [ticket, setTicket] = useState<TicketDetail | null>(null);

useEffect(() => { const fetchTicket = async () => { const res = await axios.get(/api/tickets/${id}, { headers: { Authorization: Bearer ${localStorage.getItem('token')} } }); setTicket(res.data); }; fetchTicket(); }, [id]);

if (!ticket) return <div>Loading...</div>;

return ( <div className="p-4"> <h2 className="text-xl font-bold">{ticket.subject}</h2> <p>{ticket.description}</p> <p>Status: {ticket.status}</p> <p>Priority: {ticket.priority}</p> </div> ); };

export default TicketDetails;

// --- src/pages/TicketForm.tsx --- import React, { useState } from 'react'; import axios from 'axios';

const TicketForm: React.FC = () => { const [subject, setSubject] = useState(''); const [description, setDescription] = useState(''); const [priority, setPriority] = useState('LOW');

const handleSubmit = async () => { await axios.post('/api/tickets', { subject, description, priority }, { headers: { Authorization: Bearer ${localStorage.getItem('token')} } }); alert('Ticket submitted'); };

return ( <div className="p-4"> <h2 className="text-xl font-bold mb-4">Create Ticket</h2> <input className="border mb-2 p-2 block" placeholder="Subject" value={subject} onChange={e => setSubject(e.target.value)} /> <textarea className="border mb-2 p-2 block" placeholder="Description" value={description} onChange={e => setDescription(e.target.value)} /> <select value={priority} onChange={e => setPriority(e.target.value)} className="border mb-2 p-2 block"> <option value="LOW">LOW</option> <option value="MEDIUM">MEDIUM</option> <option value="HIGH">HIGH</option> <option value="URGENT">URGENT</option> </select> <button onClick={handleSubmit} className="bg-green-500 text-white px-4 py-2">Submit</button> </div> ); };

export default TicketForm;

// --- src/services/api.ts --- import axios from 'axios';

const api = axios.create({ baseURL: '/api', });

export default api;

// --- src/App.tsx --- import React from 'react'; import { BrowserRouter, Routes, Route } from 'react-router-dom'; import Login from './pages/Login'; import Dashboard from './pages/Dashboard'; import TicketDetails from './pages/TicketDetails'; import TicketForm from './pages/TicketForm';

const App: React.FC = () => { return ( <BrowserRouter> <Routes> <Route path="/" element={<Login />} /> <Route path="/dashboard" element={<Dashboard />} /> <Route path="/tickets/:id" element={<TicketDetails />} /> <Route path="/tickets/new" element={<TicketForm />} /> </Routes> </BrowserRouter> ); };

export default App;

// --- src/main.tsx --- import React from 'react'; import ReactDOM from 'react-dom'; import App from './App'; import './index.css';

ReactDOM.render( <React.StrictMode> <App /> </React.StrictMode>, document.getElementById('root') );


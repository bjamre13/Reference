//
// src/App.tsx import React from "react"; import { BrowserRouter as Router, Routes, Route } from "react-router-dom"; import Dashboard from "./components/Dashboard"; import Login from "./components/Login"; import Register from "./components/Register"; import TicketDetails from "./components/TicketDetails"; import CreateTicket from "./components/CreateTicket"; import NotFound from "./components/NotFound";

function App() { return ( <Router> <Routes> <Route path="/" element={<Login />} /> <Route path="/register" element={<Register />} /> <Route path="/dashboard" element={<Dashboard />} /> <Route path="/ticket/:ticketId" element={<TicketDetails />} /> <Route path="/create-ticket" element={<CreateTicket />} /> <Route path="*" element={<NotFound />} /> </Routes> </Router> ); }

export default App;


// src/App.tsx import React from "react"; import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom"; import LoginPage from "./components/auth/LoginPage"; import Dashboard from "./components/dashboard/Dashboard"; import TicketList from "./components/tickets/TicketList"; import TicketDetails from "./components/tickets/TicketDetails"; import TicketForm from "./components/tickets/TicketForm"; import Notifications from "./components/notifications/Notifications";

const App: React.FC = () => { return ( <Router> <Routes> <Route path="/login" element={<LoginPage />} /> <Route path="/dashboard" element={<Dashboard />}> <Route index element={<TicketList />} /> <Route path="tickets/new" element={<TicketForm />} /> <Route path="tickets/:ticketId" element={<TicketDetails />} /> <Route path="notifications" element={<Notifications />} /> </Route> <Route path="*" element={<Navigate to="/login" />} /> </Routes> </Router> ); };

export default App;

// src/components/auth/LoginPage.tsx import React, { useState } from "react"; import axios from "axios"; import { useNavigate } from "react-router-dom";

const LoginPage: React.FC = () => { const [email, setEmail] = useState(""); const [password, setPassword] = useState(""); const navigate = useNavigate();

const handleLogin = async () => { try { const response = await axios.post("/api/auth/login", { email, password }); localStorage.setItem("token", response.data.token); navigate("/dashboard"); } catch (error) { alert("Login failed"); } };

return ( <div> <h2>Login</h2> <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} /> <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} /> <button onClick={handleLogin}>Login</button> </div> ); };

export default LoginPage;

// src/components/dashboard/Dashboard.tsx import React from "react"; import { Outlet, Link } from "react-router-dom";

const Dashboard: React.FC = () => { return ( <div> <h1>Support Dashboard</h1> <nav> <Link to="/dashboard">Tickets</Link> | <Link to="/dashboard/tickets/new">New Ticket</Link> | <Link to="/dashboard/notifications">Notifications</Link> </nav> <Outlet /> </div> ); };

export default Dashboard;

// src/components/tickets/TicketList.tsx import React, { useEffect, useState } from "react"; import axios from "axios"; import { Link } from "react-router-dom";

const TicketList: React.FC = () => { const [tickets, setTickets] = useState([]);

useEffect(() => { axios.get("/api/tickets", { headers: { Authorization: Bearer ${localStorage.getItem("token")} } }) .then(res => setTickets(res.data)) .catch(() => alert("Failed to fetch tickets")); }, []);

return ( <div> <h2>Tickets</h2> <ul> {tickets.map((ticket: any) => ( <li key={ticket.ticketId}> <Link to={/dashboard/tickets/${ticket.ticketId}}>{ticket.subject}</Link> </li> ))} </ul> </div> ); };

export default TicketList;

// src/components/tickets/TicketDetails.tsx import React, { useEffect, useState } from "react"; import { useParams } from "react-router-dom"; import axios from "axios";

const TicketDetails: React.FC = () => { const { ticketId } = useParams(); const [ticket, setTicket] = useState<any>(null);

useEffect(() => { axios.get(/api/tickets/${ticketId}, { headers: { Authorization: Bearer ${localStorage.getItem("token")} } }) .then(res => setTicket(res.data)) .catch(() => alert("Failed to load ticket")); }, [ticketId]);

if (!ticket) return <div>Loading...</div>;

return ( <div> <h2>{ticket.subject}</h2> <p>{ticket.description}</p> <p>Status: {ticket.status}</p> </div> ); };

export default TicketDetails;

// src/components/tickets/TicketForm.tsx import React, { useState } from "react"; import axios from "axios"; import { useNavigate } from "react-router-dom";

const TicketForm: React.FC = () => { const [subject, setSubject] = useState(""); const [description, setDescription] = useState(""); const navigate = useNavigate();

const handleSubmit = () => { axios.post("/api/tickets", { subject, description }, { headers: { Authorization: Bearer ${localStorage.getItem("token")} } }) .then(() => navigate("/dashboard")) .catch(() => alert("Failed to create ticket")); };

return ( <div> <h2>Create Ticket</h2> <input type="text" placeholder="Subject" value={subject} onChange={(e) => setSubject(e.target.value)} /> <textarea placeholder="Description" value={description} onChange={(e) => setDescription(e.target.value)} /> <button onClick={handleSubmit}>Submit</button> </div> ); };

export default TicketForm;

// src/components/notifications/Notifications.tsx import React, { useEffect, useState } from "react"; import axios from "axios";

const Notifications: React.FC = () => { const [notifications, setNotifications] = useState([]);

useEffect(() => { axios.get("/api/notifications", { headers: { Authorization: Bearer ${localStorage.getItem("token")} } }) .then(res => setNotifications(res.data)) .catch(() => alert("Failed to fetch notifications")); }, []);

return ( <div> <h2>Notifications</h2> <ul> {notifications.map((note: any) => ( <li key={note.notificationId}>{note.message}</li> ))} </ul> </div> ); };

export default Notifications;



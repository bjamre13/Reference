//error
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentController': Unsatisfied dependency expressed through field 'commentService': Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository': Error creating bean with name 'commentRepository' defined in com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); Reason: Failed to create query for method public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); No property 'id' found for type 'Ticket'; Traversed path: Comment.ticket
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'commentServiceImpl': Unsatisfied dependency expressed through field 'commentRepository': Error creating bean with name 'commentRepository' defined in com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); Reason: Failed to create query for method public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); No property 'id' found for type 'Ticket'; Traversed path: Comment.ticket
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentRepository' defined in com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); Reason: Failed to create query for method public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); No property 'id' found for type 'Ticket'; Traversed path: Comment.ticket
Caused by: java.lang.IllegalArgumentException: Failed to create query for method public abstract java.util.List com.customersupportticketsystem.CustomerSupportTicketSystem.repository.CommentRepository.findByTicketIdOrderByCreatedAtAsc(java.lang.Long); No property 'id' found for type 'Ticket'; Traversed path: Comment.ticket
Caused by: org.springframework.data.mapping.PropertyReferenceException: No property 'id' found for type 'Ticket'; Traversed path: Comment.ticket


@Override
protected void configure(HttpSecurity http) throws Exception {
    http
        .csrf().disable()
        .authorizeRequests()
        .antMatchers("/api/users/signup").permitAll()  // <-- allow signup
        .anyRequest().authenticated()
        .and()
        .httpBasic();  // or .formLogin() if you're using forms
}




package com.example.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/users/signup", "/api/users/login").permitAll()
                .anyRequest().authenticated()
            )
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
            );
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // Optional: if you're using authenticationManager() for manual auth
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}